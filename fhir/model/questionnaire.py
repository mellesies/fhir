# -*- coding: utf-8 -*-
from __future__ import print_function
import datetime as dt
import logging

from . import Property, PropertyDefinition
from . import FHIRBase, Element, Extension, Reference

from .backboneelement import BackboneElement
from .domainresource import DomainResource

from ._boolean import boolean
from ._code import code
from ._date import date
from ._datetime import dateTime
from ._decimal import decimal
from ._integer import integer
from ._markdown import markdown
from ._string import string
from ._time import time
from ._uri import uri

from .attachment import Attachment
from .backboneelement import BackboneElement
from .codeableconcept import CodeableConcept
from .coding import Coding
from .contactdetail import ContactDetail
from .identifier import Identifier
from .period import Period
from .quantity import Quantity
from .usagecontext import UsageContext

__author__ = "Melle Sieswerda"
__copyright__  = "Copyright 2017, Melle Sieswerda"
__license__ = "GPL"
__version__ = "0.8"

__all__ = ['Questionnaire']

class Item(BackboneElement):
    """Autogenerated class for implicit type."""
    linkId = Property(PropertyDefinition('linkId', 'string', '1', '1'))    
    definition = Property(PropertyDefinition('definition', 'uri', '0', '1'))    
    code = Property(PropertyDefinition('code', 'Coding', '0', '*'))    
    prefix = Property(PropertyDefinition('prefix', 'string', '0', '1'))    
    text = Property(PropertyDefinition('text', 'string', '0', '1'))    
    type = Property(PropertyDefinition('type', 'code', '1', '1'))    
    enableWhen = Property(PropertyDefinition('enableWhen', 'EnableWhen', '0', '*'))    
    required = Property(PropertyDefinition('required', 'boolean', '0', '1'))    
    repeats = Property(PropertyDefinition('repeats', 'boolean', '0', '1'))    
    readOnly = Property(PropertyDefinition('readOnly', 'boolean', '0', '1'))    
    maxLength = Property(PropertyDefinition('maxLength', 'integer', '0', '1'))    
    options = Property(PropertyDefinition('options', 'Reference(reference="None")', '0', '1'))    
    option = Property(PropertyDefinition('option', 'Option', '0', '*'))    
    initial = Property(PropertyDefinition('initial', ['boolean', 'decimal', 'integer', 'date', 'dateTime', 'time', 'string', 'uri', 'Attachment', 'Coding', 'Quantity', 'Reference(reference="None")'], '0', '1'))    
    item = Property(PropertyDefinition('item', 'Item', '0', '*'))    

class EnableWhen(BackboneElement):
    """Autogenerated class for implicit type."""
    question = Property(PropertyDefinition('question', 'string', '1', '1'))    
    hasAnswer = Property(PropertyDefinition('hasAnswer', 'boolean', '0', '1'))    
    answer = Property(PropertyDefinition('answer', ['boolean', 'decimal', 'integer', 'date', 'dateTime', 'time', 'string', 'uri', 'Attachment', 'Coding', 'Quantity', 'Reference(reference="None")'], '0', '1'))    

class Option(BackboneElement):
    """Autogenerated class for implicit type."""
    value = Property(PropertyDefinition('value', ['integer', 'date', 'time', 'string', 'Coding'], '1', '1'))    


# ------------------------------------------------------------------------------
# Questionnaire
# ------------------------------------------------------------------------------
class Questionnaire(DomainResource):
    """
    A structured set of questions intended to guide the collection of
    answers from end-users. Questionnaires provide detailed control over
    order, presentation, phraseology and grouping to allow coherent,
    consistent data collection.
    
    Autogenerated class.
    """
    _url = 'http://hl7.org/fhir/StructureDefinition/Questionnaire'
    
    url = Property(PropertyDefinition('url', uri, '0', '1'))
    identifier = Property(PropertyDefinition('identifier', Identifier, '0', '*'))
    version = Property(PropertyDefinition('version', string, '0', '1'))
    name = Property(PropertyDefinition('name', string, '0', '1'))
    title = Property(PropertyDefinition('title', string, '0', '1'))
    status = Property(PropertyDefinition('status', code, '1', '1'))
    experimental = Property(PropertyDefinition('experimental', boolean, '0', '1'))
    date = Property(PropertyDefinition('date', dateTime, '0', '1'))
    publisher = Property(PropertyDefinition('publisher', string, '0', '1'))
    description = Property(PropertyDefinition('description', markdown, '0', '1'))
    purpose = Property(PropertyDefinition('purpose', markdown, '0', '1'))
    approvalDate = Property(PropertyDefinition('approvalDate', date, '0', '1'))
    lastReviewDate = Property(PropertyDefinition('lastReviewDate', date, '0', '1'))
    effectivePeriod = Property(PropertyDefinition('effectivePeriod', Period, '0', '1'))
    useContext = Property(PropertyDefinition('useContext', UsageContext, '0', '*'))
    jurisdiction = Property(PropertyDefinition('jurisdiction', CodeableConcept, '0', '*'))
    contact = Property(PropertyDefinition('contact', ContactDetail, '0', '*'))
    copyright = Property(PropertyDefinition('copyright', markdown, '0', '1'))
    code = Property(PropertyDefinition('code', Coding, '0', '*'))
    subjectType = Property(PropertyDefinition('subjectType', code, '0', '*'))
    item = Property(PropertyDefinition('item', Item, '0', '*'))
